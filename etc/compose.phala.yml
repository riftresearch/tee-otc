configs:
  postgres-conf:
    content: |
      # PostgreSQL primary config (replication-ready)
      listen_addresses = '*'
      password_encryption = 'scram-sha-256'
      wal_level = logical
      max_wal_senders = 10
      max_replication_slots = 10
      max_logical_replication_workers = 4
      max_sync_workers_per_subscription = 2
      hot_standby = on
      shared_buffers = 256MB
      work_mem = 16MB
      maintenance_work_mem = 128MB
      max_connections = 256
      log_connections = on
      log_disconnections = on
      log_statement = 'none'

  postgres-hba:
    content: |
      # TYPE  DATABASE        USER            ADDRESS                 METHOD
      local   all             all                                     scram-sha-256
      host    all             all             127.0.0.1/32            scram-sha-256
      host    all             all             ::1/128                 scram-sha-256

      # Allow app traffic from the docker bridge (local docker network only)
      # Note: otc_app is the superuser and the application user
      host    all             otc_app         172.21.0.0/16           scram-sha-256

      # Replication user access
      # For logical replication, replicator needs both replication protocol access
      # and database access for initial table sync and publication queries
      host    replication     replicator      0.0.0.0/0               scram-sha-256
      host    replication     replicator      ::0/0                   scram-sha-256
      host    otc_db          replicator      0.0.0.0/0               scram-sha-256
      host    otc_db          replicator      ::0/0                   scram-sha-256

  postgres-init.sh:
    content: |
      #!/usr/bin/env bash
      set -euo pipefail

      # Replica creds from env (must be set in the postgres service)
      : "$${REPLICA_USER:?REPLICA_USER must be set}"
      : "$${REPLICA_PASSWORD:?REPLICA_PASSWORD must be set}"

      echo "Creating replication role: '$${REPLICA_USER}'"

      # Note: POSTGRES_USER (otc_app) is already created as superuser by the postgres image
      # using the sidecar-generated password via POSTGRES_PASSWORD_FILE
      psql -v ON_ERROR_STOP=1 --username "$$POSTGRES_USER" --dbname "$$POSTGRES_DB" <<-SQL
        DO \$\$
        BEGIN
          IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = '$${REPLICA_USER}') THEN
            CREATE ROLE $${REPLICA_USER} LOGIN REPLICATION PASSWORD '$${REPLICA_PASSWORD}';
          ELSE
            ALTER ROLE $${REPLICA_USER} WITH LOGIN REPLICATION PASSWORD '$${REPLICA_PASSWORD}';
          END IF;
        END
        \$\$;
      SQL

      # Ensure public schema is set up properly
      psql -v ON_ERROR_STOP=1 --username "$$POSTGRES_USER" --dbname "$$POSTGRES_DB" <<-SQL
        CREATE SCHEMA IF NOT EXISTS public;

        -- Future tables: superuser will own what it creates
        ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO $$POSTGRES_USER;
        ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO $$POSTGRES_USER;
      SQL

      # Create publication for logical replication
      echo "Creating publication for logical replication..."
      psql -v ON_ERROR_STOP=1 --username "$$POSTGRES_USER" --dbname "$$POSTGRES_DB" <<-SQL
        DO \$\$
        BEGIN
          IF NOT EXISTS (SELECT 1 FROM pg_publication WHERE pubname = 'otc_all_tables') THEN
            CREATE PUBLICATION otc_all_tables FOR ALL TABLES;
            RAISE NOTICE 'Created publication: otc_all_tables';
          ELSE
            RAISE NOTICE 'Publication otc_all_tables already exists';
          END IF;
        END
        \$\$;
      SQL

      # Grant read-only access to replicator for logical replication
      echo "Granting read-only access to replication user..."
      psql -v ON_ERROR_STOP=1 --username "$$POSTGRES_USER" --dbname "$$POSTGRES_DB" <<-SQL
        -- Allow replicator to use the public schema
        GRANT USAGE ON SCHEMA public TO $${REPLICA_USER};
        
        -- Grant SELECT on all existing tables (read-only)
        GRANT SELECT ON ALL TABLES IN SCHEMA public TO $${REPLICA_USER};
        
        -- Grant SELECT on all future tables (read-only)
        ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO $${REPLICA_USER};
        
        -- Grant USAGE on sequences (needed for reading sequence values during replication)
        GRANT USAGE ON ALL SEQUENCES IN SCHEMA public TO $${REPLICA_USER};
        ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT USAGE ON SEQUENCES TO $${REPLICA_USER};
      SQL

      echo "Init complete. Superuser: $$POSTGRES_USER, Replica user: $$REPLICA_USER (read-only)"

  otc-server-entrypoint:
    content: |
      #!/bin/sh
      set -e
      
      # Read database credentials from sidecar-generated secrets
      if [ ! -f /run/postgres-secrets/app_user.txt ] || [ ! -f /run/postgres-secrets/app_password.txt ]; then
        echo "ERROR: Database credentials not found in /run/postgres-secrets"
        exit 1
      fi
      
      DB_USER=$$(cat /run/postgres-secrets/app_user.txt | tr -d '\n\r')
      DB_PASS=$$(cat /run/postgres-secrets/app_password.txt | tr -d '\n\r')
      
      # Construct DATABASE_URL using the generated credentials
      # Note: password is hex-only so no URL encoding needed
      export DATABASE_URL="postgres://$${DB_USER}:$${DB_PASS}@postgres:5432/otc_db"
      
      echo "Starting otc-server with database user: $${DB_USER}"
      
      # Execute the original entrypoint/command
      exec "$@"

  dozzle_users:
    content: |
      users:
        admin:
            email: cliff@rift.exchange
            name: Cliff Syner
            password: $$2a$$11$$KETX/yx/Y9EzmTvXGJGJxu5jZqR.nvyS3HbdV510Fc4I/KhUnT.EO
            filter: ""
            roles: ""

  bitcoin-entrypoint:
    content: |
      #!/bin/bash
      set -euo pipefail

      archive_url="https://rift-blockchain-archive.s3.us-west-1.amazonaws.com/bitcoind-datadir-2025-09-11.tar.lz4"

      echo "Checking Bitcoin directory: $$BITCOIN_DATA_DIR"

      # If both core subdirs are missing, treat as empty
      if [[ ! -d "$$BITCOIN_DATA_DIR/blocks" ]] && [[ ! -d "$$BITCOIN_DATA_DIR/chainstate" ]]; then
          echo "Bitcoin data directory appears to be empty. Downloading blockchain data..."
          echo "Download will be streamed and decompressed on the fly (lz4)."

          # Ensure target dir exists
          mkdir -p "$$BITCOIN_DATA_DIR"

          echo "Downloading from: $$archive_url"
          echo "Extracting directly to: $$BITCOIN_DATA_DIR"

          # Stream download -> lz4 decode -> tar extract
          if wget -O - "$$archive_url" | tar -I lz4 -xvf - -C "$$BITCOIN_DATA_DIR"; then
              echo "Download and extraction successful"

              # Ensure correct ownership if running as root
              if id -u bitcoin >/dev/null 2>&1; then
                  chown -R bitcoin:bitcoin "$$BITCOIN_DATA_DIR" || true
              fi

              echo "Data directory size: $$(du -sh $$BITCOIN_DATA_DIR | cut -f1)"
          else
              echo "Warning: Failed to download or extract blockchain data. Bitcoin Core will sync from genesis."
              echo "This will take significantly longer but is still functional."
          fi
      else
          echo "Bitcoin data directory already contains blockchain data"
          echo "Data directory size: $$(du -sh $$BITCOIN_DATA_DIR | cut -f1)"
      fi

      # Clean up any temporary files
      rm -rf /tmp/*

      echo "Starting Bitcoin Core with arguments: $*"
      exec bitcoind "$@"


  reth-entrypoint:
    content: |
      #!/bin/bash
      set -euo pipefail
      
      # Reth snapshot configuration
      archive_url="https://downloads.merkle.io/reth-2025-09-18.tar.lz4"
      reth_data_dir="$$RETH_DATA_DIR"
      
      echo "Checking Reth data directory: $$reth_data_dir"
      
      # Check if the mainnet directory is empty (no db or static_files folders)
      if [[ ! -d "$$reth_data_dir/db" ]] && [[ ! -d "$$reth_data_dir/static_files" ]]; then
          echo "Reth data directory appears to be empty. Downloading Reth snapshot..."
          
          # Ensure the data directory exists
          mkdir -p "$$reth_data_dir"
          
          echo "Downloading Reth snapshot from: $$archive_url"
          echo "Extracting directly to: $$reth_data_dir"
          
          # Download and extract directly using wget and tar with lz4
          # This follows the exact pattern from the Merkle documentation
          if wget -O - "$$archive_url" | tar -I lz4 -xvf - -C "$$reth_data_dir"; then
              echo "Reth snapshot download and extraction successful"
              echo "Data directory size: $$(du -sh $$reth_data_dir | cut -f1)"
          else
              echo "Warning: Failed to download Reth snapshot. Reth will sync from genesis block."
              echo "This will take approximately 48 hours on powerful hardware but is still functional."
          fi
      else
          echo "Reth data directory already contains blockchain data"
          if [[ -d "$$reth_data_dir" ]]; then
              echo "Data directory size: $$(du -sh $$reth_data_dir | cut -f1)"
          fi
      fi
      
      # Clean up any temporary files
      rm -rf /tmp/*
      
      echo "Starting Reth with arguments: $*"
      exec reth "$@"

  prometheus-config:
    content: |
      global:
        scrape_interval: 15s
      scrape_configs:
        - job_name: prometheus
          static_configs:
            - targets:
                - prometheus:9090
        - job_name: node-exporter
          static_configs:
            - targets:
                - node-exporter:9100
        - job_name: cadvisor
          static_configs:
            - targets:
                - cadvisor:8080
        - job_name: otc-server
          static_configs:
            - targets:
                - otc-server:9000
        - job_name: rfq-server
          static_configs:
            - targets:
                - rfq-server:9000

  grafana-datasource:
    content: |
      apiVersion: 1
      deleteDatasources:
        - name: Prometheus
      datasources:
        - name: Prometheus
          uid: PBFA97CFB590B2093
          type: prometheus
          access: proxy
          url: http://prometheus:9090
          isDefault: true

  grafana-dashboard-provider:
    content: |
      apiVersion: 1
      providers:
        - name: Default
          orgId: 1
          folder: ""
          type: file
          options:
            path: /etc/grafana/provisioning/dashboards

  grafana-node-dashboard:
    content: |
      {
        "annotations": {
          "list": [
            {
              "builtIn": 1,
              "datasource": {
                "type": "grafana",
                "uid": "grafana"
              },
              "enable": true,
              "hide": true,
              "iconColor": "rgba(0, 211, 255, 1)",
              "name": "Annotations & Alerts",
              "type": "dashboard"
            }
          ]
        },
        "editable": true,
        "fiscalYearStartMonth": 0,
        "graphTooltip": 1,
        "links": [],
        "panels": [
          {
            "datasource": {
              "type": "prometheus",
              "uid": "PBFA97CFB590B2093"
            },
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                },
                "custom": {
                  "axisBorderShow": false,
                  "axisCenteredZero": false,
                  "axisColorMode": "text",
                  "axisLabel": "",
                  "axisPlacement": "auto",
                  "barAlignment": 0,
                  "drawStyle": "bars",
                  "fillOpacity": 0,
                  "gradientMode": "none",
                  "hideFrom": {
                    "legend": false,
                    "tooltip": false,
                    "viz": false
                  },
                  "insertNulls": false,
                  "lineInterpolation": "linear",
                  "lineWidth": 10,
                  "pointSize": 5,
                  "scaleDistribution": {
                    "type": "linear"
                  },
                  "showPoints": "auto",
                  "spanNulls": false,
                  "stacking": {
                    "group": "A",
                    "mode": "normal"
                  },
                  "thresholdsStyle": {
                    "mode": "off"
                  }
                },
                "mappings": [],
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "red",
                      "value": 80
                    }
                  ]
                }
              },
              "overrides": [
                {
                  "matcher": {
                    "id": "byName",
                    "options": "BITCOIN"
                  },
                  "properties": [
                    {
                      "id": "color",
                      "value": {
                        "fixedColor": "orange",
                        "mode": "fixed"
                      }
                    }
                  ]
                },
                {
                  "matcher": {
                    "id": "byName",
                    "options": "ETHEREUM:0xcbb7c0000ab88b473b1f5afd9ef808440eed33bf"
                  },
                  "properties": [
                    {
                      "id": "color",
                      "value": {
                        "fixedColor": "blue",
                        "mode": "fixed"
                      }
                    }
                  ]
                },
                {
                  "matcher": {
                    "id": "byName",
                    "options": "BITCOIN Deposit"
                  },
                  "properties": [
                    {
                      "id": "color",
                      "value": {
                        "fixedColor": "orange",
                        "mode": "fixed"
                      }
                    }
                  ]
                },
                {
                  "matcher": {
                    "id": "byName",
                    "options": "ETHEREUM:0xcbb7c0000ab88b473b1f5afd9ef808440eed33bf Deposit"
                  },
                  "properties": [
                    {
                      "id": "color",
                      "value": {
                        "fixedColor": "blue",
                        "mode": "fixed"
                      }
                    }
                  ]
                }
              ]
            },
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 0,
              "y": 0
            },
            "id": 9,
            "options": {
              "legend": {
                "calcs": [],
                "displayMode": "list",
                "placement": "bottom",
                "showLegend": true
              },
              "tooltip": {
                "mode": "single",
                "sort": "none"
              }
            },
            "targets": [
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "PBFA97CFB590B2093"
                },
                "disableTextWrap": false,
                "editorMode": "builder",
                "expr": "rate(otc_swap_volume_total{job=\"otc-server\"}[$__rate_interval])",
                "fullMetaSearch": false,
                "includeNullMetadata": false,
                "instant": false,
                "legendFormat": "{{market}}",
                "range": true,
                "refId": "A",
                "useBackend": false
              }
            ],
            "title": "Volume (sats)",
            "transformations": [
              {
                "id": "renameByRegex",
                "options": {
                  "regex": "^(.*)-[^-]*$",
                  "renamePattern": "$1 Deposit"
                }
              }
            ],
            "type": "timeseries"
          },
          {
            "datasource": {
              "type": "prometheus",
              "uid": "PBFA97CFB590B2093"
            },
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                },
                "custom": {
                  "axisBorderShow": false,
                  "axisCenteredZero": false,
                  "axisColorMode": "text",
                  "axisLabel": "",
                  "axisPlacement": "auto",
                  "barAlignment": 0,
                  "drawStyle": "bars",
                  "fillOpacity": 0,
                  "gradientMode": "none",
                  "hideFrom": {
                    "legend": false,
                    "tooltip": false,
                    "viz": false
                  },
                  "insertNulls": false,
                  "lineInterpolation": "linear",
                  "lineWidth": 10,
                  "pointSize": 5,
                  "scaleDistribution": {
                    "type": "linear"
                  },
                  "showPoints": "auto",
                  "spanNulls": false,
                  "stacking": {
                    "group": "A",
                    "mode": "normal"
                  },
                  "thresholdsStyle": {
                    "mode": "off"
                  }
                },
                "mappings": [],
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "red",
                      "value": 80
                    }
                  ]
                }
              },
              "overrides": [
                {
                  "matcher": {
                    "id": "byName",
                    "options": "ETHEREUM:0xcbb7c0000ab88b473b1f5afd9ef808440eed33bf"
                  },
                  "properties": [
                    {
                      "id": "color",
                      "value": {
                        "fixedColor": "blue",
                        "mode": "fixed"
                      }
                    }
                  ]
                },
                {
                  "matcher": {
                    "id": "byName",
                    "options": "BITCOIN"
                  },
                  "properties": [
                    {
                      "id": "color",
                      "value": {
                        "fixedColor": "orange",
                        "mode": "fixed"
                      }
                    }
                  ]
                }
              ]
            },
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 12,
              "y": 0
            },
            "id": 10,
            "options": {
              "legend": {
                "calcs": [],
                "displayMode": "list",
                "placement": "bottom",
                "showLegend": true
              },
              "tooltip": {
                "mode": "single",
                "sort": "none"
              }
            },
            "targets": [
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "PBFA97CFB590B2093"
                },
                "disableTextWrap": false,
                "editorMode": "code",
                "expr": "rate(otc_swap_fees_total{instance=\"otc-server:9000\"}[$__rate_interval])",
                "fullMetaSearch": false,
                "includeNullMetadata": false,
                "instant": false,
                "legendFormat": "{{market}}",
                "range": true,
                "refId": "A",
                "useBackend": false
              }
            ],
            "title": "Fees (sats)",
            "transformations": [
              {
                "id": "renameByRegex",
                "options": {
                  "regex": "^[^-]*-(.*)$",
                  "renamePattern": "$1"
                }
              }
            ],
            "type": "timeseries"
          },
          {
            "datasource": {
              "type": "prometheus",
              "uid": "PBFA97CFB590B2093"
            },
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                },
                "custom": {
                  "axisBorderShow": false,
                  "axisCenteredZero": false,
                  "axisColorMode": "text",
                  "axisLabel": "",
                  "axisPlacement": "auto",
                  "barAlignment": 0,
                  "drawStyle": "line",
                  "fillOpacity": 0,
                  "gradientMode": "none",
                  "hideFrom": {
                    "legend": false,
                    "tooltip": false,
                    "viz": false
                  },
                  "insertNulls": false,
                  "lineInterpolation": "linear",
                  "lineWidth": 1,
                  "pointSize": 5,
                  "scaleDistribution": {
                    "type": "linear"
                  },
                  "showPoints": "auto",
                  "spanNulls": false,
                  "stacking": {
                    "group": "A",
                    "mode": "none"
                  },
                  "thresholdsStyle": {
                    "mode": "off"
                  }
                },
                "mappings": [],
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "red",
                      "value": 80
                    }
                  ]
                }
              },
              "overrides": []
            },
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 0,
              "y": 8
            },
            "id": 11,
            "options": {
              "legend": {
                "calcs": [],
                "displayMode": "list",
                "placement": "bottom",
                "showLegend": true
              },
              "tooltip": {
                "mode": "single",
                "sort": "none"
              }
            },
            "targets": [
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "PBFA97CFB590B2093"
                },
                "disableTextWrap": false,
                "editorMode": "builder",
                "expr": "otc_swaps_active_individual{instance=\"otc-server:9000\"}",
                "fullMetaSearch": false,
                "includeNullMetadata": true,
                "instant": false,
                "legendFormat": "Waiting User Deposit",
                "range": true,
                "refId": "A",
                "useBackend": false
              },
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "PBFA97CFB590B2093"
                },
                "disableTextWrap": false,
                "editorMode": "builder",
                "expr": "otc_swap_batches_active{instance=\"otc-server:9000\"}",
                "fullMetaSearch": false,
                "hide": false,
                "includeNullMetadata": true,
                "instant": false,
                "legendFormat": "Waiting MM Batches",
                "range": true,
                "refId": "B",
                "useBackend": false
              }
            ],
            "title": "Active Swap Pool",
            "type": "timeseries"
          },
          {
            "datasource": {
              "type": "prometheus",
              "uid": "PBFA97CFB590B2093"
            },
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                },
                "custom": {
                  "axisBorderShow": false,
                  "axisCenteredZero": false,
                  "axisColorMode": "text",
                  "axisLabel": "",
                  "axisPlacement": "auto",
                  "barAlignment": 0,
                  "drawStyle": "line",
                  "fillOpacity": 0,
                  "gradientMode": "none",
                  "hideFrom": {
                    "legend": false,
                    "tooltip": false,
                    "viz": false
                  },
                  "insertNulls": false,
                  "lineInterpolation": "linear",
                  "lineWidth": 1,
                  "pointSize": 5,
                  "scaleDistribution": {
                    "type": "linear"
                  },
                  "showPoints": "auto",
                  "spanNulls": false,
                  "stacking": {
                    "group": "A",
                    "mode": "none"
                  },
                  "thresholdsStyle": {
                    "mode": "off"
                  }
                },
                "mappings": [],
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "red",
                      "value": 80
                    }
                  ]
                },
                "unit": "s"
              },
              "overrides": []
            },
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 12,
              "y": 8
            },
            "id": 8,
            "options": {
              "legend": {
                "calcs": [],
                "displayMode": "list",
                "placement": "bottom",
                "showLegend": true
              },
              "tooltip": {
                "mode": "single",
                "sort": "none"
              }
            },
            "targets": [
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "PBFA97CFB590B2093"
                },
                "disableTextWrap": false,
                "editorMode": "builder",
                "exemplar": false,
                "expr": "otc_swap_monitoring_duration_seconds{quantile=\"0.95\"}",
                "fullMetaSearch": false,
                "includeNullMetadata": true,
                "instant": false,
                "legendFormat": "p95",
                "range": true,
                "refId": "A",
                "useBackend": false
              }
            ],
            "title": "Swap Monitoring Time",
            "type": "timeseries"
          },
          {
            "datasource": {
              "type": "prometheus",
              "uid": "PBFA97CFB590B2093"
            },
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                },
                "custom": {
                  "axisBorderShow": false,
                  "axisCenteredZero": false,
                  "axisColorMode": "text",
                  "axisLabel": "",
                  "axisPlacement": "auto",
                  "barAlignment": 0,
                  "drawStyle": "line",
                  "fillOpacity": 0,
                  "gradientMode": "none",
                  "hideFrom": {
                    "legend": false,
                    "tooltip": false,
                    "viz": false
                  },
                  "insertNulls": false,
                  "lineInterpolation": "linear",
                  "lineWidth": 1,
                  "pointSize": 5,
                  "scaleDistribution": {
                    "type": "linear"
                  },
                  "showPoints": "auto",
                  "spanNulls": false,
                  "stacking": {
                    "group": "A",
                    "mode": "none"
                  },
                  "thresholdsStyle": {
                    "mode": "off"
                  }
                },
                "mappings": [],
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "red",
                      "value": 80
                    }
                  ]
                },
                "unit": "percent"
              },
              "overrides": []
            },
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 0,
              "y": 16
            },
            "id": 1,
            "options": {
              "legend": {
                "calcs": [],
                "displayMode": "list",
                "placement": "right",
                "showLegend": true
              },
              "tooltip": {
                "mode": "single",
                "sort": "none"
              }
            },
            "targets": [
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "PBFA97CFB590B2093"
                },
                "editorMode": "code",
                "expr": "sum by (name) (rate(container_cpu_usage_seconds_total{name=~\"tee-.*\"}[5m])) * 100",
                "legendFormat": "{{name}}",
                "range": true,
                "refId": "A"
              }
            ],
            "title": "Container CPU Usage",
            "type": "timeseries"
          },
          {
            "datasource": {
              "type": "prometheus",
              "uid": "PBFA97CFB590B2093"
            },
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                },
                "custom": {
                  "axisBorderShow": false,
                  "axisCenteredZero": false,
                  "axisColorMode": "text",
                  "axisLabel": "",
                  "axisPlacement": "auto",
                  "barAlignment": 0,
                  "drawStyle": "line",
                  "fillOpacity": 0,
                  "gradientMode": "none",
                  "hideFrom": {
                    "legend": false,
                    "tooltip": false,
                    "viz": false
                  },
                  "insertNulls": false,
                  "lineInterpolation": "linear",
                  "lineWidth": 1,
                  "pointSize": 5,
                  "scaleDistribution": {
                    "type": "linear"
                  },
                  "showPoints": "auto",
                  "spanNulls": false,
                  "stacking": {
                    "group": "A",
                    "mode": "none"
                  },
                  "thresholdsStyle": {
                    "mode": "off"
                  }
                },
                "mappings": [],
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "red",
                      "value": 80
                    }
                  ]
                },
                "unit": "decbytes"
              },
              "overrides": []
            },
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 12,
              "y": 16
            },
            "id": 2,
            "options": {
              "legend": {
                "calcs": [],
                "displayMode": "list",
                "placement": "right",
                "showLegend": true
              },
              "tooltip": {
                "mode": "single",
                "sort": "none"
              }
            },
            "targets": [
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "PBFA97CFB590B2093"
                },
                "editorMode": "code",
                "expr": "max by (name) (container_memory_working_set_bytes{name=~\"tee-.*\"})",
                "legendFormat": "{{name}}",
                "range": true,
                "refId": "A"
              }
            ],
            "title": "Container Memory Usage",
            "type": "timeseries"
          },
          {
            "datasource": {
              "type": "prometheus",
              "uid": "PBFA97CFB590B2093"
            },
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                },
                "custom": {
                  "axisBorderShow": false,
                  "axisCenteredZero": false,
                  "axisColorMode": "text",
                  "axisLabel": "",
                  "axisPlacement": "auto",
                  "barAlignment": 0,
                  "drawStyle": "line",
                  "fillOpacity": 0,
                  "gradientMode": "none",
                  "hideFrom": {
                    "legend": false,
                    "tooltip": false,
                    "viz": false
                  },
                  "insertNulls": false,
                  "lineInterpolation": "linear",
                  "lineWidth": 1,
                  "pointSize": 5,
                  "scaleDistribution": {
                    "type": "linear"
                  },
                  "showPoints": "auto",
                  "spanNulls": false,
                  "stacking": {
                    "group": "A",
                    "mode": "none"
                  },
                  "thresholdsStyle": {
                    "mode": "off"
                  }
                },
                "mappings": [],
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "red",
                      "value": 80
                    }
                  ]
                },
                "unit": "Bps"
              },
              "overrides": []
            },
            "gridPos": {
              "h": 8,
              "w": 24,
              "x": 0,
              "y": 24
            },
            "id": 4,
            "options": {
              "legend": {
                "calcs": [],
                "displayMode": "list",
                "placement": "right",
                "showLegend": true
              },
              "tooltip": {
                "mode": "single",
                "sort": "none"
              }
            },
            "targets": [
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "PBFA97CFB590B2093"
                },
                "editorMode": "code",
                "expr": "sum by (name) (rate(container_network_receive_bytes_total{name=~\"tee-.*\", interface!=\"lo\"}[5m]))",
                "legendFormat": "RX {{name}}",
                "range": true,
                "refId": "A"
              },
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "PBFA97CFB590B2093"
                },
                "editorMode": "code",
                "expr": "sum by (name) (rate(container_network_transmit_bytes_total{name=~\"tee-.*\", interface!=\"lo\"}[5m]))",
                "legendFormat": "TX {{name}}",
                "range": true,
                "refId": "B"
              }
            ],
            "title": "Container Network I/O",
            "type": "timeseries"
          },
          {
            "datasource": {
              "type": "prometheus",
              "uid": "PBFA97CFB590B2093"
            },
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                },
                "custom": {
                  "axisBorderShow": false,
                  "axisCenteredZero": false,
                  "axisColorMode": "text",
                  "axisLabel": "",
                  "axisPlacement": "auto",
                  "barAlignment": 0,
                  "drawStyle": "line",
                  "fillOpacity": 0,
                  "gradientMode": "none",
                  "hideFrom": {
                    "legend": false,
                    "tooltip": false,
                    "viz": false
                  },
                  "insertNulls": false,
                  "lineInterpolation": "linear",
                  "lineWidth": 1,
                  "pointSize": 5,
                  "scaleDistribution": {
                    "type": "linear"
                  },
                  "showPoints": "auto",
                  "spanNulls": false,
                  "stacking": {
                    "group": "A",
                    "mode": "none"
                  },
                  "thresholdsStyle": {
                    "mode": "off"
                  }
                },
                "mappings": [],
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "red",
                      "value": 80
                    }
                  ]
                },
                "unit": "percent"
              },
              "overrides": []
            },
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 0,
              "y": 32
            },
            "id": 5,
            "options": {
              "legend": {
                "calcs": [],
                "displayMode": "list",
                "placement": "right",
                "showLegend": true
              },
              "tooltip": {
                "mode": "single",
                "sort": "none"
              }
            },
            "targets": [
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "PBFA97CFB590B2093"
                },
                "editorMode": "code",
                "expr": "(1 - avg by (instance) (rate(node_cpu_seconds_total{mode=\"idle\"}[5m]))) * 100",
                "legendFormat": "CPU {{instance}}",
                "range": true,
                "refId": "A"
              }
            ],
            "title": "Host CPU Usage",
            "type": "timeseries"
          },
          {
            "datasource": {
              "type": "prometheus",
              "uid": "PBFA97CFB590B2093"
            },
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                },
                "custom": {
                  "axisBorderShow": false,
                  "axisCenteredZero": false,
                  "axisColorMode": "text",
                  "axisLabel": "",
                  "axisPlacement": "auto",
                  "barAlignment": 0,
                  "drawStyle": "line",
                  "fillOpacity": 0,
                  "gradientMode": "none",
                  "hideFrom": {
                    "legend": false,
                    "tooltip": false,
                    "viz": false
                  },
                  "insertNulls": false,
                  "lineInterpolation": "linear",
                  "lineWidth": 1,
                  "pointSize": 5,
                  "scaleDistribution": {
                    "type": "linear"
                  },
                  "showPoints": "auto",
                  "spanNulls": false,
                  "stacking": {
                    "group": "A",
                    "mode": "none"
                  },
                  "thresholdsStyle": {
                    "mode": "off"
                  }
                },
                "mappings": [],
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "red",
                      "value": 80
                    }
                  ]
                },
                "unit": "percent"
              },
              "overrides": []
            },
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 12,
              "y": 32
            },
            "id": 6,
            "options": {
              "legend": {
                "calcs": [],
                "displayMode": "list",
                "placement": "right",
                "showLegend": true
              },
              "tooltip": {
                "mode": "single",
                "sort": "none"
              }
            },
            "targets": [
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "PBFA97CFB590B2093"
                },
                "editorMode": "code",
                "expr": "(1 - sum(node_memory_MemAvailable_bytes) / sum(node_memory_MemTotal_bytes)) * 100",
                "legendFormat": "Host Memory",
                "range": true,
                "refId": "A"
              }
            ],
            "title": "Host Memory Usage",
            "type": "timeseries"
          },
          {
            "datasource": {
              "type": "prometheus",
              "uid": "PBFA97CFB590B2093"
            },
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                },
                "custom": {
                  "axisBorderShow": false,
                  "axisCenteredZero": false,
                  "axisColorMode": "text",
                  "axisLabel": "",
                  "axisPlacement": "auto",
                  "barAlignment": 0,
                  "drawStyle": "line",
                  "fillOpacity": 0,
                  "gradientMode": "none",
                  "hideFrom": {
                    "legend": false,
                    "tooltip": false,
                    "viz": false
                  },
                  "insertNulls": false,
                  "lineInterpolation": "linear",
                  "lineWidth": 1,
                  "pointSize": 5,
                  "scaleDistribution": {
                    "type": "linear"
                  },
                  "showPoints": "auto",
                  "spanNulls": false,
                  "stacking": {
                    "group": "A",
                    "mode": "none"
                  },
                  "thresholdsStyle": {
                    "mode": "off"
                  }
                },
                "mappings": [],
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "red",
                      "value": 80
                    }
                  ]
                },
                "unit": "decbytes"
              },
              "overrides": []
            },
            "gridPos": {
              "h": 8,
              "w": 24,
              "x": 0,
              "y": 40
            },
            "id": 7,
            "options": {
              "legend": {
                "calcs": [],
                "displayMode": "list",
                "placement": "right",
                "showLegend": true
              },
              "tooltip": {
                "mode": "single",
                "sort": "none"
              }
            },
            "targets": [
              {
                "datasource": {
                  "type": "prometheus",
                  "uid": "PBFA97CFB590B2093"
                },
                "editorMode": "code",
                "expr": "node_filesystem_size_bytes{\n  mountpoint=\"/var/volatile/dstack/persistent\",\n  fstype!~\"tmpfs|overlay\"\n}\n-\nnode_filesystem_free_bytes{\n  mountpoint=\"/var/volatile/dstack/persistent\",\n  fstype!~\"tmpfs|overlay\"\n}",
                "legendFormat": "Used",
                "range": true,
                "refId": "A"
              }
            ],
            "title": "Host Storage",
            "type": "timeseries"
          }
        ],
        "refresh": "",
        "schemaVersion": 39,
        "tags": [
          "monitoring"
        ],
        "templating": {
          "list": []
        },
        "time": {
          "from": "2025-10-20T20:37:22.651Z",
          "to": "2025-10-20T20:47:13.331Z"
        },
        "timepicker": {},
        "timezone": "",
        "title": "TEE Monitoring dev",
        "uid": "tee-monitoring-dev",
        "version": 1,
        "weekStart": ""
      }

services:
  eth-jwt-generator:
    container_name: tee-eth-jwt-generator
    build:
      context: .
      dockerfile_inline: |
        FROM alpine:3.22.1
        RUN apk add --no-cache openssl
        WORKDIR /app
        ENTRYPOINT ["sh", "-c"]
    command: >
      "mkdir -p /jwt &&
      if [ ! -f /jwt/jwt.hex ]; then
        echo 'Generating new JWT secret...' &&
        openssl rand -hex 32 > /jwt/jwt.hex &&
        echo 'JWT secret generated and saved to /jwt/jwt.hex'
      else
        echo 'JWT secret already exists, skipping generation'
      fi &&
      echo 'JWT secret is ready for use' &&
      echo 'JWT Generator service completed successfully'"
    volumes:
      - eth_jwt_data:/jwt
    restart: "no"
    networks:
      - rift-network
  
  pg-secret-generator:
    container_name: tee-pg-secret-generator
    image: alpine:3.22.1
    command: >
      sh -c "
        set -e;
        mkdir -p /secrets;
        # only generate once; idempotent across restarts
        if [ ! -f /secrets/app_user.txt ]; then
          echo 'otc_app' > /secrets/app_user.txt;
        fi;
        if [ ! -f /secrets/app_password.txt ]; then
          apk add --no-cache openssl >/dev/null;
          openssl rand -hex 32 | tr -d '\n' > /secrets/app_password.txt;
          echo 'Generated new app DB password';
        else
          echo 'App DB password already exists, skipping';
        fi
      "
    volumes:
      - pg_secrets:/secrets
    restart: "no"
    networks:
      - rift-network

  postgres:
    image: postgres:16-alpine
    container_name: tee-otc-postgres
    environment:
      # Superuser (also used by the application)
      POSTGRES_USER: otc_app
      POSTGRES_PASSWORD_FILE: /run/postgres-secrets/app_password.txt
      POSTGRES_DB: otc_db

      # Replication user credentials
      REPLICA_USER: replicator
      REPLICA_PASSWORD: ${POSTGRES_REPLICA_PASSWORD:?set POSTGRES_REPLICA_PASSWORD}
      # REPLICA_PASSWORD: temp_replica_user_password

      POSTGRES_INITDB_ARGS: "--data-checksums"
    volumes:
      - otc_postgres_data:/var/lib/postgresql/data
      - pg_secrets:/run/postgres-secrets:ro
    configs:
      - source: postgres-conf
        target: /etc/postgresql/postgresql.conf
      - source: postgres-hba
        target: /etc/postgresql/pg_hba.conf
      - source: postgres-init.sh
        target: /docker-entrypoint-initdb.d/00-init.sh
        mode: 0755
    command:
      - "-c"
      - "config_file=/etc/postgresql/postgresql.conf"
      - "-c"
      - "hba_file=/etc/postgresql/pg_hba.conf"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    ports:
      - "5432:5432"
    depends_on:
      pg-secret-generator:
        condition: service_completed_successfully
    networks:
      - rift-network
  
  dozzle:
    container_name: tee-dozzle
    image: amir20/dozzle:latest
    environment:
      - DOZZLE_AUTH_PROVIDER=simple
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    configs:
      - source: dozzle_users
        target: /data/users.yml
    ports:
      - 8095:8080

  bitcoin-core:
    container_name: tee-bitcoin-core
    build:
      context: .
      platforms:
        - linux/amd64
      dockerfile_inline: |
        FROM debian:trixie
        RUN apt-get update \
          && apt-get install -y --no-install-recommends \
             ca-certificates \
             curl \
             tar \
             bash \
             lz4 \
             wget \
             aria2 \
          && rm -rf /var/lib/apt/lists/*

        RUN useradd -m -u 1000 -s /bin/bash bitcoin \
          && mkdir -p /home/bitcoin/.bitcoin \
          && chown -R bitcoin:bitcoin /home/bitcoin/.bitcoin
        WORKDIR /opt/bitcoin
        RUN curl -fsSL "https://bitcoincore.org/bin/bitcoin-core-29.0/bitcoin-29.0-x86_64-linux-gnu.tar.gz" -o bitcoin.tar.gz \
          && tar -xzf bitcoin.tar.gz --strip-components=1 \
          && install -m 0755 -o root -g root -t /usr/local/bin bin/* \
          && rm -rf /opt/bitcoin

        EXPOSE 8332 8333
        VOLUME ["/home/bitcoin/.bitcoin"]
        USER bitcoin
        WORKDIR /home/bitcoin
        ENTRYPOINT ["/usr/local/bin/bitcoin-entrypoint.sh"]
    environment:
      BITCOIN_DATA_DIR: /home/bitcoin/.bitcoin
    command:
      - "-server=1"
      - "-txindex=1"
      - "-rpcbind=0.0.0.0"
      - "-rpcallowip=0.0.0.0/0"
      - "-rpcuser=user"
      - "-rpcpassword=pass"
      - "-datadir=/home/bitcoin/.bitcoin"
      - "-fallbackfee=0.0002"
    volumes:
      - bitcoin_data:/home/bitcoin/.bitcoin
    configs:
      - source: bitcoin-entrypoint
        target: /usr/local/bin/bitcoin-entrypoint.sh
        mode: 0755
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "bitcoin-cli -rpcuser=user -rpcpassword=pass getblockchaininfo > /dev/null || exit 1",
        ]
      interval: 20s
      timeout: 10s
      retries: 10
      start_period: 30s
    networks:
      - rift-network
    platform: linux/amd64

  otc-server:
    image: riftresearch/otc-server:0.4.0
    restart: unless-stopped
    container_name: tee-otc-server
    depends_on:
      pg-secret-generator:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      bitcoin-core:
        condition: service_started
    entrypoint: ["/usr/local/bin/otc-server-entrypoint.sh"]
    command: ["/app/otc-server", "--host", "0.0.0.0", "--port", "4422"]
    environment:
      GRANT_SUDO: yes
      # DATABASE_URL is constructed dynamically in the entrypoint from sidecar-generated secrets
      RUST_LOG: info 
      EVM_RPC_URL: http://reth:8545
      UNTRUSTED_EVM_TOKEN_INDEXER_URL: ${UNTRUSTED_EVM_TOKEN_INDEXER_URL}
      BITCOIN_RPC_URL: http://bitcoin-core:8332
      BITCOIN_RPC_AUTH: user:pass
      ELECTRUM_HTTP_SERVER_URL: ${UNTRUSTED_ELECTRUM_HTTP_SERVER_URL}
      CORS_DOMAIN: "*"
      CHAINALYSIS_HOST: ${CHAINALYSIS_HOST}
      CHAINALYSIS_TOKEN: ${CHAINALYSIS_TOKEN}
      CONFIG_DIR: /app/config
      DSTACK_SOCK_PATH: /var/run/dstack.sock
      METRICS_LISTEN_ADDR: 0.0.0.0:9000
    ports:
      - "4422:4422"
    expose:
      - "9000"
    networks:
      - rift-network
    volumes:
      - ${DSTACK_SOCK_PATH:-/var/run/dstack.sock}:/var/run/dstack.sock
      - otc_server_config_data:/app/config
      - pg_secrets:/run/postgres-secrets:ro
    configs:
      - source: otc-server-entrypoint
        target: /usr/local/bin/otc-server-entrypoint.sh
        mode: 0755
    platform: linux/amd64
    user: root

  reth:
    restart: unless-stopped
    container_name: tee-reth
    build:
      context: .
      dockerfile_inline: |
        FROM ghcr.io/paradigmxyz/reth:v1.8.1
        
        USER root
        
        RUN apt-get update && apt-get install -y \
            wget \
            lz4 \
            bash \
            coreutils \
            && rm -rf /var/lib/apt/lists/*
        
        # Create reth user and data directory
        RUN useradd -m -u 1000 -s /bin/bash reth \
            && mkdir -p /root/.local/share/reth/mainnet \
            && chown -R reth:reth /root/.local/share/reth
        
        ENTRYPOINT ["/usr/local/bin/reth-entrypoint.sh"]
    depends_on:
      eth-jwt-generator:
        condition: service_completed_successfully
    environment:
      RETH_DATA_DIR: /root/.local/share/reth/mainnet
    ports:
      # - "9001:9001" # metrics
      - "30303:30303" # eth/66 peering
      - "8545:8545" # rpc
      #- "8551:8551" # engine
    volumes:
      - reth_mainnet_data:/root/.local/share/reth/mainnet
      - reth_logs:/root/logs
      - eth_jwt_data:/root/jwt:ro
    configs:
      - source: reth-entrypoint
        target: /usr/local/bin/reth-entrypoint.sh
        mode: 0755
    pid: host
    command: >
      node
      --chain mainnet
      --metrics 0.0.0.0:9001
      --log.file.directory /root/logs
      --authrpc.addr 0.0.0.0
      --authrpc.port 8551
      --authrpc.jwtsecret /root/jwt/jwt.hex
      --http --http.addr 0.0.0.0 --http.port 8545
      --http.api "eth,net,web3"
    networks:
      - rift-network
    
  lighthouse:
    restart: unless-stopped
    image: sigp/lighthouse:v7.0.1
    container_name: tee-lighthouse
    depends_on:
      eth-jwt-generator:
        condition: service_completed_successfully
      reth:
        condition: service_started
    ports:
      #- "5052:5052/tcp" # rpc
     # - "5053:5053/tcp"
      #- "5054:5054/tcp" # metrics
      - "9000:9000/tcp" # p2p
      - "9000:9000/udp" # p2p
    volumes:
      - lighthouse_data:/root/.lighthouse
      - eth_jwt_data:/root/jwt:ro
    command: >
      lighthouse bn
      --network mainnet
      --http --http-address 0.0.0.0
      --execution-endpoint http://reth:8551
      --metrics --metrics-address 0.0.0.0
      --execution-jwt /root/jwt/jwt.hex
      --checkpoint-sync-url https://sync-mainnet.beaconcha.in
      --checkpoint-sync-url-timeout=300
    networks:
      - rift-network

  node-exporter:
    image: prom/node-exporter:v1.8.2
    container_name: tee-node-exporter
    restart: unless-stopped
    pid: host
    command:
      - "--path.rootfs=/rootfs"
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    volumes:
      - /:/rootfs:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    # ports:
      # - "9100:9100"
    networks:
      - rift-network

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    container_name: tee-cadvisor
    restart: unless-stopped
    privileged: true
    #ports:
    #  - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - rift-network

  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: tee-prometheus
    restart: unless-stopped
    #ports:
    #  - "9090:9090"
    depends_on:
      node-exporter:
        condition: service_started
      cadvisor:
        condition: service_started
    volumes:
      - prometheus_data:/prometheus
    configs:
      - source: prometheus-config
        target: /etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.enable-lifecycle"
    networks:
      - rift-network

  grafana:
    image: grafana/grafana:10.4.2
    container_name: tee-grafana
    restart: unless-stopped
    ports:
      - "3015:3000"
    depends_on:
      prometheus:
        condition: service_started
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
    configs:
      - source: grafana-datasource
        target: /etc/grafana/provisioning/datasources/prometheus.yml
      - source: grafana-dashboard-provider
        target: /etc/grafana/provisioning/dashboards/provider.yml
      - source: grafana-node-dashboard
        target: /etc/grafana/provisioning/dashboards/tee-monitoring.json
    networks:
      - rift-network



networks:
  rift-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  otc_postgres_data:
  bitcoin_data:
  otc_server_config_data:
  prometheus_data:
  reth_logs:
  eth_jwt_data:
  lighthouse_data:
  reth_mainnet_data:
  pg_secrets:
